// Copyright the Hyperledger Fabric contributors. All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: elect.proto

package pbgo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Elect_Ballot_FullMethodName       = "/pbgo.Elect/Ballot"
	Elect_GetIdentity_FullMethodName  = "/pbgo.Elect/GetIdentity"
	Elect_List_FullMethodName         = "/pbgo.Elect/List"
	Elect_CalloutVote_FullMethodName  = "/pbgo.Elect/CalloutVote"
	Elect_CheckVoteBox_FullMethodName = "/pbgo.Elect/CheckVoteBox"
)

// ElectClient is the client API for Elect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ElectClient interface {
	Ballot(ctx context.Context, in *Vote, opts ...grpc.CallOption) (*BallotResponse, error)
	GetIdentity(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*ListResponse, error)
	List(ctx context.Context, in *Empt, opts ...grpc.CallOption) (*ListResponse, error)
	CalloutVote(ctx context.Context, in *Vote, opts ...grpc.CallOption) (*CalloutVoteResponse, error)
	CheckVoteBox(ctx context.Context, in *Vote, opts ...grpc.CallOption) (*CheckVoteBoxResponse, error)
}

type electClient struct {
	cc grpc.ClientConnInterface
}

func NewElectClient(cc grpc.ClientConnInterface) ElectClient {
	return &electClient{cc}
}

func (c *electClient) Ballot(ctx context.Context, in *Vote, opts ...grpc.CallOption) (*BallotResponse, error) {
	out := new(BallotResponse)
	err := c.cc.Invoke(ctx, Elect_Ballot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *electClient) GetIdentity(ctx context.Context, in *Identity, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, Elect_GetIdentity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *electClient) List(ctx context.Context, in *Empt, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, Elect_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *electClient) CalloutVote(ctx context.Context, in *Vote, opts ...grpc.CallOption) (*CalloutVoteResponse, error) {
	out := new(CalloutVoteResponse)
	err := c.cc.Invoke(ctx, Elect_CalloutVote_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *electClient) CheckVoteBox(ctx context.Context, in *Vote, opts ...grpc.CallOption) (*CheckVoteBoxResponse, error) {
	out := new(CheckVoteBoxResponse)
	err := c.cc.Invoke(ctx, Elect_CheckVoteBox_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ElectServer is the server API for Elect service.
// All implementations must embed UnimplementedElectServer
// for forward compatibility
type ElectServer interface {
	Ballot(context.Context, *Vote) (*BallotResponse, error)
	GetIdentity(context.Context, *Identity) (*ListResponse, error)
	List(context.Context, *Empt) (*ListResponse, error)
	CalloutVote(context.Context, *Vote) (*CalloutVoteResponse, error)
	CheckVoteBox(context.Context, *Vote) (*CheckVoteBoxResponse, error)
	mustEmbedUnimplementedElectServer()
}

// UnimplementedElectServer must be embedded to have forward compatible implementations.
type UnimplementedElectServer struct {
}

func (UnimplementedElectServer) Ballot(context.Context, *Vote) (*BallotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ballot not implemented")
}
func (UnimplementedElectServer) GetIdentity(context.Context, *Identity) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentity not implemented")
}
func (UnimplementedElectServer) List(context.Context, *Empt) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedElectServer) CalloutVote(context.Context, *Vote) (*CalloutVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalloutVote not implemented")
}
func (UnimplementedElectServer) CheckVoteBox(context.Context, *Vote) (*CheckVoteBoxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckVoteBox not implemented")
}
func (UnimplementedElectServer) mustEmbedUnimplementedElectServer() {}

// UnsafeElectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ElectServer will
// result in compilation errors.
type UnsafeElectServer interface {
	mustEmbedUnimplementedElectServer()
}

func RegisterElectServer(s grpc.ServiceRegistrar, srv ElectServer) {
	s.RegisterService(&Elect_ServiceDesc, srv)
}

func _Elect_Ballot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectServer).Ballot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Elect_Ballot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectServer).Ballot(ctx, req.(*Vote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Elect_GetIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectServer).GetIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Elect_GetIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectServer).GetIdentity(ctx, req.(*Identity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Elect_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Elect_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectServer).List(ctx, req.(*Empt))
	}
	return interceptor(ctx, in, info, handler)
}

func _Elect_CalloutVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectServer).CalloutVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Elect_CalloutVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectServer).CalloutVote(ctx, req.(*Vote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Elect_CheckVoteBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectServer).CheckVoteBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Elect_CheckVoteBox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectServer).CheckVoteBox(ctx, req.(*Vote))
	}
	return interceptor(ctx, in, info, handler)
}

// Elect_ServiceDesc is the grpc.ServiceDesc for Elect service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Elect_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pbgo.Elect",
	HandlerType: (*ElectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ballot",
			Handler:    _Elect_Ballot_Handler,
		},
		{
			MethodName: "GetIdentity",
			Handler:    _Elect_GetIdentity_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Elect_List_Handler,
		},
		{
			MethodName: "CalloutVote",
			Handler:    _Elect_CalloutVote_Handler,
		},
		{
			MethodName: "CheckVoteBox",
			Handler:    _Elect_CheckVoteBox_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "elect.proto",
}
